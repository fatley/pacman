Question 1 (3 points)
Improve the ReflexAgent to play respectably. 
Reflex agent provides some helpful methods that call 
into GameState for information. A capable reflex agent 
will have to consider both food locations and ghost locations 
to perform well. 

Your agent should easily and reliably clear 
the testClassic layout:
python3 -m pacai.bin.pacman --pacman ReflexAgent --layout testClassic

Try out your reflex agent on the default mediumClassic layout with one and two ghosts:
python3 -m pacai.bin.pacman --pacman ReflexAgent --num-ghosts 1
python3 -m pacai.bin.pacman --pacman ReflexAgent --num-ghosts 2

How does your agent fare? 
It will likely often die with 2 ghosts on the default board, 
unless your evaluation function is quite good.

Notes:

You can never have more than two ghosts on mediumClassic.
As features, try the reciprocal of important values 
(such as distance to food) rather than just the values
themselves.

The evaluation function you're writing is evaluating
state-action pairs; in later parts of the project, 
you'll be evaluating states.
Options: Default ghosts are random; you can also 
play for fun with slightly smarter directional ghosts 
using --ghosts DirectionalGhost. If the randomness
 is preventing you from telling whether your agent 
 is improving, you can use --seed [NUMBER] to run with 
 a seed. You can also play multiple games in a 
 row with --num-games [NUMBER]. 
 Turn off graphics with --null-graphics to run lots of
 games quickly.

The autograder will check that your agent can rapidly 
clear the openClassic layout ten times without 
dying more than twice or thrashing around infinitely 
(i.e. repeatedly moving back and forth between two 
positions, making no progress).

python3 -m pacai.bin.pacman --pacman ReflexAgent --layout openClassic --num-games 10 --null-graphics
Don't spend too much time on this question, though, as the meat of the project lies ahead.



def getCapsules(self):
    """
    Returns a list of positions (x, y) of the remaining capsules.
    """

    return self._capsules


def getAgentPosition(self, index):
    """
    Returns a location tuple of the agent with the given index.
    It is possible for this method to return None if the agent's position is unknown
    (like if it just died and is respawning).
    """

    position = self._agentStates[index].getPosition()
    if (position is None):
        return None

    # Ensure positions are ints.
    return tuple(int(pos) for pos in position)

    def getFood
(
self)
Returns a Grid of boolean food indicator variables.

Grids can be accessed via list notation. So to check if there is food at (x, y), just do something like: food[x][y].

Callers should favor hasFood() over this, since this will make a copy of the grid.